#        version = as.character(version)) %>%
# mutate(p15 = as.numeric(as.character(p15))) %>%
mutate(p15 = na_if(p15,99),
version = as.character(version)) %>%
as_survey_design(ids=1,
weight= fe_final_)  %>%
group_by(p15,version) %>%
summarise(prop = survey_total(vartype = c("se","ci"), level = 0.95))
test <- d %>%
select(p15, version, fe_final_) %>%
# mutate(p15=recode(p15,
#                   "Ninguna" = "0",
#                   "Una" = "1",
#                   "Dos" = "2",
#                   "Tres" = "3",
#                   "Cuatro" = "4",
#                   "Ns/Nc" = "99"),
#        fe_final = as.numeric(fe_final_),
#        version = as.character(version)) %>%
# mutate(p15 = as.numeric(as.character(p15))) %>%
mutate(p15 = na_if(p15,99),
version = as.character(version))
View(test)
test <- d %>%
select(p15, version, fe_final_) %>%
# mutate(p15=recode(p15,
#                   "Ninguna" = "0",
#                   "Una" = "1",
#                   "Dos" = "2",
#                   "Tres" = "3",
#                   "Cuatro" = "4",
#                   "Ns/Nc" = "99"),
#        fe_final = as.numeric(fe_final_),
#        version = as.character(version)) %>%
# mutate(p15 = as.numeric(as.character(p15))) %>%
mutate(p15 = na_if(p15,99),
version = as.character(version)) %>%
#as_survey_design(ids=1,                    weight= fe_final_)  %>%
group_by(p15,version)
View(test)
test <- d %>%
select(p15, version, fe_final_) %>%
# mutate(p15=recode(p15,
#                   "Ninguna" = "0",
#                   "Una" = "1",
#                   "Dos" = "2",
#                   "Tres" = "3",
#                   "Cuatro" = "4",
#                   "Ns/Nc" = "99"),
#        fe_final = as.numeric(fe_final_),
#        version = as.character(version)) %>%
# mutate(p15 = as.numeric(as.character(p15))) %>%
mutate(p15 = na_if(p15,99),
version = as.character(version)) %>%
#as_survey_design(ids=1,                    weight= fe_final_)  %>%
group_by(p15,version) %>%
summarise(prop = n())
View(test)
test <- d %>%
select(p15, version, fe_final_) %>%
# mutate(p15=recode(p15,
#                   "Ninguna" = "0",
#                   "Una" = "1",
#                   "Dos" = "2",
#                   "Tres" = "3",
#                   "Cuatro" = "4",
#                   "Ns/Nc" = "99"),
#        fe_final = as.numeric(fe_final_),
#        version = as.character(version)) %>%
# mutate(p15 = as.numeric(as.character(p15))) %>%
mutate(p15 = na_if(p15,99),
version = as.character(version)) %>%
mutate_at(vars(p15, version), factor) %>%
as_survey_design(ids=1,
weight= fe_final_)  %>%
group_by(p15,version) %>%
summarise(prop = survey_total(vartype = c("se","ci"), level = 0.95))
test <- d %>%
select(p15, version, fe_final_) %>%
# mutate(p15=recode(p15,
#                   "Ninguna" = "0",
#                   "Una" = "1",
#                   "Dos" = "2",
#                   "Tres" = "3",
#                   "Cuatro" = "4",
#                   "Ns/Nc" = "99"),
#        fe_final = as.numeric(fe_final_),
#        version = as.character(version)) %>%
# mutate(p15 = as.numeric(as.character(p15))) %>%
mutate(p15 = na_if(p15,99),
version = as.character(version)) %>%
mutate_at(vars(p15, version), factor) %>%
as_survey_design(ids=1,
weight= fe_final_)  %>%
group_by(p15,version) %>%
summarise(prop = survey_total(vartype = c("se","ci"), level = 0.95))
View(test)
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
setwd("GitHub//COVID-19-Opinion/")
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
require(shiny)
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
div(plotly, align = "center")
require(htmltools, quietly = T)
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
View(data_cono)
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
data_cono <- cuadros_OP%>%
filter(Pregunta == pregunta1)
ur <-   ggplot(data_cono,
aes(x = str_wrap(id, 10), y = value,
fill = id,
label = Porcentaje,
text = text)) +
geom_col(width = 0.5) +
scale_fill_manual(values = data_cono$color)+
theme_minimal() +
labs(title = str_wrap(titulo, 50),
subtitle = str_wrap(subtitulo, 50),
caption = caption1,
x="",
y="")
plotly <- ggplotly(ur, dynamicTicks = TRUE, tooltip = c("text"))%>%
layout(height=600,tickfont= list(size=8),
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
tickvalues ="",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
div(plotly, class="myplot", align = "center")
plotly <- ggplotly(ur, dynamicTicks = TRUE, tooltip = c("text"))%>%
layout(height=600,autosize=T,
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
tickvalues ="",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly <- ggplotly(ur, dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(autosize=T,
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
tickvalues ="",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly
plotly <- ggplotly(ur, dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(autosize=T,
font=list(size=8),
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
tickvalues ="",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly
plotly <- ggplotly(ur, dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(autosize=T,
font=list(size="auto"),
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly
plotly <- ggplotly(ur, dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(autosize=T,
font=list(size="3"),
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly
plotly <- ggplotly(ur, dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(autosize=T,
xaxisfont=list(size="3"),
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly
plotly <- ggplotly(ur, dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(autosize=T,
xaxis= list(font = list(size="30")),
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly
plotly <- ggplotly(ur+theme(axis.text.x = element_text(size=10)), dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(autosize=T,
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly
plotly <- ggplotly(ur+theme(axis.text.x = element_text(size=30)), dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(autosize=T,
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly
plotly <- ggplotly(ur+theme(axis.text.x = element_text(size=8)), dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(autosize=T,
yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
plotly
pregunta1 <- "¿Usted está enterado de los casos de Coronavirus que se han presentado en México y algunos otros países?"
titulo <- "Conocimiento de Coronavirus en México - Parametría"
subtitulo <- pregunta1
data_cono <- cuadros_OP%>%
filter(Pregunta == pregunta1)
ur <-   ggplot(data_cono,
aes(x = str_wrap(id, 10), y = value,
fill = id,
label = Porcentaje,
text = text)) +
geom_col(width = 0.5) +
scale_fill_manual(values = data_cono$color)+
theme_minimal() +
labs(title = str_wrap(titulo, 50),
subtitle = str_wrap(subtitulo, 50),
caption = caption1,
x="",
y="")
ggsave("03_graficas/param_conocimiento_covid.pdf", plot = ur+
geom_label(size = 8)+
scale_y_percent(limits = c(0,(max(data_cono$value)+.1)))+
theme(plot.title = element_text(size = 35, face = "bold"),
plot.subtitle = element_text(size = 25),
plot.caption = element_text(size = 15),
panel.spacing.x = unit(3, "lines"),
axis.text.x = element_text(size = 25, vjust = 0.5),
axis.text.y = element_text(size = 15),
legend.position = "none"),
width = 15, height = 10, dpi = 100)
if(params$view_html) {
plotly <- ggplotly(ur+theme(axis.text.x = element_text(size=8)), dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
saveWidgetFix(plotly,libdir = "graph_dependencies", selfcontained = F,
file="03_graficas/informacion_op_param.html")
div(plotly, class="myplot", align = "center")
} else if(params$view_pdf ){
include_graphics(path ="03_graficas/param_conocimiento_covid.png", auto_pdf = T)
}
plotly <- ggplotly(ur+theme(axis.text.x = element_text(size=8)), dynamicTicks = TRUE, tooltip = c("text"),height=600)%>%
layout(yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
showlegend = F,
annotations = list(x = 1, y = -0.1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
div(plotly, class="myplot", align = "center")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
