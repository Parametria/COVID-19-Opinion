emojis = stri_extract_all_charclass(text, "\\p{EMOJI}"),
texto = gsub(text, pattern = " ", replacement = "_"),
texto = gsub(texto, pattern = "[[:space:]]", replacement = ""),
texto = gsub(texto, pattern = "_", replacement = " "),
texto = gsub(texto, pattern = "ª", replacement = ""),
texto = gsub(texto, pattern = "[0-9]+|[[:punct:]]|\\(.*\\)", replacement = ""),
texto = gsub(texto, pattern = "https[^[:space:]]*", replacement = ""),
texto = gsub(texto, pattern = "[^[:alpha:][:space:]]*", replacement = ""),
texto = gsub(texto, pattern = "[[:punct:]]", replacement = ""),
texto = gsub(texto, pattern = "  ", replacement = " "),
texto = trimws(texto),
texto = str_replace_all(texto, pattern = "rt",
replacement = ""),
fecha = as.POSIXct(created,
format = "%Y-%m-%d %T") - hours(7),
RT = stri_detect(text, fixed = "RT"),
replied_TO = ifelse(RT, stri_extract_first(text, regex = "@[[:alnum:]_]+"), "")
) %>% filter(fecha>as.POSIXct("2020-03-15", format = "%Y-%m-%d"))
ggplot(data = data %>%
group_by(month = month(fecha),day = day(fecha), hour = hour(fecha)) %>%
summarise(`Número de Tweets` = n(),
retweets = sum(as.numeric(retweet_count), na.rm = T ))%>%
mutate(Fecha= as.POSIXct(paste0(month," " ,day, " ", hour), format = "%m %d %H")),
aes(size = `Número de Tweets`,
y = `Número de Tweets`,
color = `Número de Tweets`,
x = Fecha)) +
geom_smooth(method = "loess",
show.legend = F,
colour="black") +
geom_point() +
scale_color_continuous(NULL, NULL, NULL)+
scale_size(NULL, NULL, NULL)+
scale_x_datetime(date_breaks = "3 day", date_labels =  "%b/%d %I:00%p")+
theme_ipsum(grid="Y") +
labs(title=str_wrap(fiuf, width = 80),
subtitle = str_wrap(fiuff, width = 80),
y="Número de tweets",
x="",
caption=fiuffi) +
theme(plot.title = element_text(size = 35),
plot.subtitle = element_text(size = 30),
plot.caption = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.text.x = element_text(angle = 90))
fiuffi <- "Fuente: API Twitter \n @parametria | @guzmart_ | @lolo7no"
ggplot(data = data %>%
group_by(month = month(fecha),day = day(fecha), hour = hour(fecha)) %>%
summarise(`Número de Tweets` = n(),
retweets = sum(as.numeric(retweet_count), na.rm = T ))%>%
mutate(Fecha= as.POSIXct(paste0(month," " ,day, " ", hour), format = "%m %d %H")),
aes(size = `Número de Tweets`,
y = `Número de Tweets`,
color = `Número de Tweets`,
x = Fecha)) +
geom_smooth(method = "loess",
show.legend = F,
colour="black") +
geom_point() +
scale_color_continuous(NULL, NULL, NULL)+
scale_size(NULL, NULL, NULL)+
scale_x_datetime(date_breaks = "3 day", date_labels =  "%b/%d %I:00%p")+
theme_ipsum(grid="Y") +
labs(title=str_wrap(fiuf, width = 80),
subtitle = str_wrap(fiuff, width = 80),
y="Número de tweets",
x="",
caption=fiuffi) +
theme(plot.title = element_text(size = 35),
plot.subtitle = element_text(size = 30),
plot.caption = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.text.x = element_text(angle = 90))
setwd("Desktop/extra/COVID-19-Opinion/")
tweets <- readRDS(file = "01_datos/tweets.rds")
# extrafont::loadfonts(device="win")
require(rvest, quietly = T)
## remotes::install_github("wilkelab/ggtext")
require(ggtext, quietly = T)
## devtools::install_github("hadley/emo")
require(emo, quietly = T)
require(hrbrthemes, quietly = T)
require(tidytext, quietly = T)
require(emojifont)
require(ggrepel, quietly = T)
require(stringi, quietly = T)
require(ggthemes, quietly = T)
require(lubridate, quietly = T)
require(plotly, quietly = T)
require(RColorBrewer, quietly = T)
#require(hrbthemes, quietly = T)
require(tidyverse, quietly = T)
require(htmlwidgets, quietly = T)
require(knitr, quietly = T)
require(translateR, quietly = T)
require(htmltools, quietly = T)
load.emojifont("OpenSansEmoji.ttf")
load.emojifont("EmojiOne.ttf")
caption <- "Elaboración propia con datos de Twitter | <a href='https://twitter.com/Parametria'>@parametria</a>"
caption1 <- "Elaboración propia con datos de Twitter | Parametría"
saveWidgetFix <- function (widget,file,...) {
## A wrapper to saveWidget which compensates for arguable BUG in
## saveWidget which requires `file` to be in current working
## directory.
wd<-getwd()
on.exit(setwd(wd))
outDir<-dirname(file)
file<-basename(file)
setwd(outDir);
saveWidget(widget,file=file,...)
}
rm_words <-
function(string, words) {
stopifnot(is.character(string), is.character(words))
spltted <- strsplit(string, " ", fixed = TRUE) # fixed = TRUE for speedup
vapply(spltted, function(x) paste(x[!tolower(x) %in% words], collapse = " "), character(1))
}
# Aplicar str_wrap a objetos dentro de otras funciones (como scale_x_discrete(labels=equis))
strwrap_obj <- function(x) {
str_wrap(x, width = 10)
}
BigramTokenizer <-
function(x) {
unlist(lapply(ngrams(words(x), 2), paste, collapse = " "), use.names = FALSE)
}
if(!file.exists("01_datos/tweets.rds")){
tweets <- readRDS("01_datos/covid_20MAY20.rds") %>%
as_tibble() %>%
distinct(id_str, .keep_all = T)%>%
mutate(
hashtags = stri_extract_all(text, regex = "#[[:alnum:]_]+"),
ats = stri_extract_all(text, regex = "@[[:alnum:]_]+"),
emojis = stri_extract_all_charclass(text, "\\p{EMOJI}"),
texto = stri_replace_all(text, regex = "#[[:alnum:]_]+", ""),
texto = stri_replace_all(texto, regex = "@[[:alnum:]_]+", ""),
texto = stri_replace_all_charclass(texto, "\\p{EMOJI}", ""),
texto = gsub(texto, pattern = " ", replacement = "_"),
texto = gsub(texto, pattern = "[[:space:]]", replacement = ""),
texto = gsub(texto, pattern = "_", replacement = " "),
texto = gsub(texto, pattern = "ª", replacement = ""),
texto = gsub(texto, pattern = "[0-9]+|[[:punct:]]|\\(.*\\)", replacement = ""),
texto = gsub(texto, pattern = "https[^[:space:]]*", replacement = ""),
texto = gsub(texto, pattern = "[^[:alpha:][:space:]]*", replacement = ""),
texto = gsub(texto, pattern = "[[:punct:]]", replacement = ""),
texto = gsub(texto, pattern = "  ", replacement = " "),
texto = trimws(texto),
texto = str_replace_all(texto, pattern = "rt",
replacement = ""),
fecha = as.POSIXct(created,
format = "%Y-%m-%d %T") - hours(7),
RT = stri_detect(text, fixed = "RT"),
replied_TO = ifelse(RT, stri_extract_first(text, regex = "@[[:alnum:]_]+"), "")
) %>% filter(fecha>as.POSIXct("2020-03-30", format = "%Y-%m-%d"))
saveRDS(tweets, "01_datos/tweets.rds")
} else {
tweets <- readRDS("01_datos/tweets.rds")
}
require(wordcloud2)
custom_stop_words <- enframe(tm::stopwords("es")) %>%
bind_rows(enframe(c( "t", "rt"))) %>%
rename(palabra = value)
t_pal_mas_freq <- tweets %>%
# Extraer palabras de título y agrupar por título
unnest_tokens(input = "texto", output = "palabra") %>%
# Quitar stopwords
anti_join(custom_stop_words) %>%
# Contar palabras
count(palabra, sort = TRUE) %>%
# Quitar missing values
drop_na() %>%
# palabras a mayúsculas
mutate(palabra = toupper(palabra))
t_pal_mas_freq <- t_pal_mas_freq %>% filter(!str_detect(palabra,"CLAU"))
head(t_pal_mas_freq, 20)
WC_topicos_twitter <- wordcloud2(head(t_pal_mas_freq, 100),
shape = "diamond",
size = .9,
#color = brewer.pal(n = 6, name = "Spectral"),
fontWeight = "bold",
minRotation = 1/pi,
maxRotation = 1/pi,
rotateRatio = 1
)
WC_topicos_twitter
saveWidgetFix(WC_topicos_twitter,libdir = "graph_dependencies", selfcontained = F,
file = "03_graficas/WC_topicos_twitter.html")
webshot::webshot("03_graficas/WC_topicos_twitter.html","03_graficas/WC_topicos_twitter.png",
delay =5, vwidth = 1000, vheight=800)
webshot::webshot("03_graficas/WC_topicos_twitter.html","03_graficas/WC_topicos_twitter.pdf",
delay =5, vwidth = 1000, vheight=800)
hashtags <- tweets %>%
select(id_str, hashtags)%>%
unnest(cols = hashtags)%>%
mutate(hashtags = stri_trans_general(hashtags, "latin-ascii"))%>%
drop_na() %>%group_by(hashtags) %>% summarise(n = n()) %>%
arrange(desc(n)) %>%
filter(!stri_detect(hashtags, fixed = "covid", case_insensitive = T),
!stri_detect(hashtags, fixed = "coronavirus", case_insensitive = T))
head(hashtags, 20)
WC_hashtags_twitter <- wordcloud2(head(hashtags, 150),
shape = "circle",
size = .6,
#color = brewer.pal(n = 6, name = "Spectral"),
fontWeight = "bold",
minRotation = 0,#1/pi,
maxRotation = 0,#1/pi,
rotateRatio = 1
)
WC_hashtags_twitter
saveWidgetFix(WC_hashtags_twitter,libdir = "graph_dependencies", selfcontained = F,
file = "03_graficas/WC_hashtags_twitter.html")
webshot::webshot("03_graficas/WC_hashtags_twitter.html","03_graficas/WC_hashtags_twitter.png",
delay =5, vwidth = 1000, vheight=800)
webshot::webshot("03_graficas/WC_hashtags_twitter.html","03_graficas/WC_hashtags_twitter.pdf",
delay =5, vwidth = 1000, vheight=800)
ats <- tweets %>%
select(id_str, ats)%>%
unnest(cols = ats)%>%
mutate_all(tolower)%>%
drop_na() %>%
group_by(ats) %>%
summarise(n = n()) %>%
arrange(desc(n))%>%
filter(!stri_detect(ats, fixed = "Claudi", case_insensitive = T))
head(ats, 20)
WC_ats_twitter <- wordcloud2(head(ats, 100),
shape = "diamond",
size = .7,
#color = brewer.pal(n = 6, name = "Spectral"),
fontWeight = "bold",
minRotation = 1/pi,
maxRotation = 1/pi,
rotateRatio = 1
)
WC_ats_twitter
saveWidgetFix(WC_ats_twitter,libdir = "graph_dependencies", selfcontained = F,
file = "03_graficas/WC_ats_twitter.html")
webshot::webshot("03_graficas/WC_ats_twitter.html","03_graficas/WC_ats_twitter.png",
delay =5, vwidth = 1000, vheight=800)
webshot::webshot("03_graficas/WC_ats_twitter.html","03_graficas/WC_ats_twitter.pdf",
delay =5, vwidth = 1000, vheight=800)
headfreq <- head(t_pal_mas_freq, 20)
headhash <- head(hashtags, 20)
headats <- head(ats, 20)
tol <- bind_cols(headhash, headfreq, headats)
saveRDS(tol, "01_datos/tols.rds")
## Build PDFs
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "pdf_document",  output_file = "RedesSociales")
## Build PDFs
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "pdf_document",  output_file = "RedesSociales")
## Build PDFs
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "pdf_document",  output_file = "RedesSociales")
setwd("~/Desktop/extra/COVID-19-Opinion/")
## Build PDFs
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
## Build PDFs
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
## Build PDFs
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
## Build PDFs
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
## Build PDFs
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
## Build PDFs
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
## Build PDFs
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
## Build PDFs
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "pdf_document",  output_file = "RedesSociales")
## Build PDFs
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "pdf_document",  output_file = "RedesSociales")
### Build Webpage
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "html_document", output_file = "RedesSociales")
## Build PDFs
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "pdf_document",  output_file = "RedesSociales")
### Build Webpage
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "html_document", output_file = "RedesSociales")
## Build PDFs
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "pdf_document",  output_file = "RedesSociales")
### Build Webpage
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "html_document", output_file = "RedesSociales")
## Build PDFs
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "pdf_document",  output_file = "RedesSociales")
### Build Webpage
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "html_document", output_file = "RedesSociales")
#setwd("~/Desktop/extra/COVID-19-Opinion/")
## Build PDFs
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
## Build PDFs
rm(list = ls(all.names = TRUE))
require(png, quietly = T)
require(readxl, quietly = T)
require(tidyverse, quietly = T)
require(stringi, quietly = T)
require(lubridate, quietly = T)
require(plotly, quietly = T)
require(htmlwidgets, quietly = T)
require(knitr, quietly = T)
require(hrbrthemes, quietly = T)
require(RColorBrewer, quietly = T)
require(htmltools, quietly = T)
require(ggpubr, quietly = T)
u <- Sys.setlocale("LC_TIME", "Spanish")
u <- Sys.setlocale("LC_TIME", "es_ES.UTF-8")
get_png <- function(filename) {
grid::rasterGrob(png::readPNG(filename), interpolate = TRUE)
}
p3 <- ggplot(mapping = aes(x = 0:1, y = 1)) +
theme_void() +
annotation_custom(get_png("04_resources/logo2.png"), xmin = .8, xmax = 1)
saveWidgetFix <- function (widget,file,...) {
## A wrapper to saveWidget which compensates for arguable BUG in
## saveWidget which requires `file` to be in current working
## directory.
wd<-getwd()
on.exit(setwd(wd))
outDir<-dirname(file)
file<-basename(file)
setwd(outDir);
saveWidget(widget,file=file,...)
}
color.palette <- function(n.steps.between=NULL,
steps, ...){
if(is.null(n.steps.between)) n.steps.between <- rep(0, (length(steps)-1))
if(length(n.steps.between) != length(steps)-1) stop("Must have one less n.steps.between value than steps")
fill.steps <- cumsum(rep(1, length(steps))+c(0,n.steps.between))
RGB <- matrix(NA, nrow=3, ncol=fill.steps[length(fill.steps)])
RGB[,fill.steps] <- col2rgb(steps)
for(i in which(n.steps.between>0)){
col.start=RGB[,fill.steps[i]]
col.end=RGB[,fill.steps[i+1]]
for(j in seq(3)){
vals <- seq(col.start[j], col.end[j], length.out=n.steps.between[i]+2)[2:(2+n.steps.between[i]-1)]
RGB[j,(fill.steps[i]+1):(fill.steps[i+1]-1)] <- vals
}
}
new.steps <- rgb(RGB[1,], RGB[2,], RGB[3,], maxColorValue = 255)
pal <- colorRampPalette(new.steps, ...)
return(pal)
}
colfunc <- color.palette(steps = c(brewer.pal(n = 11, "RdBu")[10],
brewer.pal(n = 11, "RdBu")[7],
brewer.pal(n = 11, "RdBu")[2]))
## Data
cuadros_OP <- read_excel("01_datos/data_202007.xlsx")
cuadros_OP_2 <- read_excel("01_datos/data_202007.xlsx") %>%
rename(categoría = v_id, id_num = orden, id= var, value = props, Pregunta =fiuf) %>%
drop_na(value)%>%
mutate(
value = value/100,
id = ifelse(id=="Nivel", País, id),
id_clean = id,
id_num = case_when(
is.na(id_num)~ as.numeric(stri_extract_first(id, regex = "[:digit:]+")),
stri_detect(id, fixed = "no sabe", case_insensitive = T) ~ 99,
T~ as.numeric(id_num)
),
text = paste0(id_clean, "\n", "Porcentaje: " ,round(value*100, 0), "%" ),
prop = value*100,
Porcentaje = paste0(prop, "%"),
#value = value/100
)%>%
group_by(Pregunta)%>%
mutate(max = max(ifelse(as.numeric(id_num)==99, NA_integer_,as.numeric(id_num) ), na.rm = T)) %>%
group_by(Pregunta)%>%
mutate(color = colfunc(max)[id_num],
color = ifelse(is.na(color), "grey", color))
categorias <- unique(cuadros_OP$Categoría)
caption <- "Elaboración con datos de <a href='https://twitter.com/Parametria'>@Parametria</a>"
caption1 <- "Elaboración propia con datos de Parametría"
#colorRamp(c(brewer.pal(n = 11, "RdBu")[1], brewer.pal(n = 11, "RdBu")[11]))
d <- cuadros_OP %>%
filter(reporte=="largo", v_id=="g8")
pregunta <- unique(d$fiuf)
titulo <- "Efectos del coronavirus en el hogar"
subtitulo <- pregunta
data_cono <- d %>%
mutate(
Fecha = format(fecha, "%B-%Y"),
Porcentaje = paste0(props, "%")
)%>%
arrange(fecha) %>% # sort
mutate_at(vars(Fecha), ~factor(., levels=unique(.))) %>%
arrange(Fecha, orden)
ur <-
ggplot(data_cono,
aes(x = reorder(str_wrap(var, 15), as.numeric(orden)),
y = props/100,
fill = str_wrap(var, 35),
label = Porcentaje,
text = Porcentaje)) +
scale_y_continuous(labels = scales::percent)+
geom_col(width = 0.5, show.legend = F) +
#coord_flip(clip = "off") +
facet_grid(cols =vars(reorder(Fecha, fecha)))+
#scale_fill_manual("", values = data_cono$color)+
theme_minimal() +
labs(title = str_wrap(titulo, 50),
subtitle = str_wrap(subtitulo, 50),
caption = caption1,
x="",
y="")
print <-  ur +
geom_label(size = 8, show.legend = FALSE) +
theme(plot.title = element_text(size = 35, face = "bold"),
plot.subtitle = element_text(size = 25),
plot.caption = element_text(size = 15),
panel.spacing.x = unit(3, "lines"),
axis.text.x = element_text(size = 10, vjust = 0.5),
axis.text.y = element_text(size = 15),
legend.position = "top"
)
ggsave("03_graficas/202007_g8.pdf", plot =gridExtra::grid.arrange(p3, print, heights = c(.1, .9)),
width = 15, height = 10, dpi = 100)
plotly <- ggplotly(ur+theme(axis.text.x = element_text(size=8)), height=600, dynamicTicks = TRUE, tooltip = c("x","text"))%>%
layout(yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
tickvalues ="",
showlegend = F,
annotations = list(x = 1, y = 1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
print
ggplotly(ur+theme(axis.text.x = element_text(size=8)), height=600, dynamicTicks = TRUE, tooltip = c("x","text"))
plotly <- ggplotly(ur+theme(axis.text.x = element_text(size=8)), height=600, tooltip = c("x","text"))%>%
layout(yaxis = list(tickformat = "%"),
title = "",
hovermode = "x",
#tickvalues ="",
showlegend = F,
annotations = list(x = 1, y = 1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rm(list = ls(all.names = TRUE))
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rm(list = ls(all.names = TRUE))
### Build Webpage
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
